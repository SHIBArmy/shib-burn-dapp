{"version":3,"sources":["store/selectors.js","store/actions.js","store/interactions.js","components/Navigator.js","components/Burner.js","App.js","reportWebVitals.js","store/reducers.js","store/configureStore.js","index.js"],"names":["web3Selector","createSelector","state","get","w3","accountSelector","a","amountSelector","loadWeb3","web3","type","PROVIDER","SHIB_TOKEN","ACCOUNT","loadEthereum","dispatch","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","SafeAppWeb3Modal","network","cacheProvider","clearCachedProvider","connect","Web3","eth","net","getId","getNetworkType","Contract","shib_token_abi","getAccounts","accounts","address","transaction","amount","utils","toWei","toString","methods","burn","send","from","gasLimit","result","console","log","Account","props","AddressWrapper","account","Navigator","useDispatch","useSelector","NavWrapper","AccountWrapper","Button","onClick","e","variant","styled","div","BurnForm","BurnerFormWrapper","BurnerFormRow","step","onChange","amountChanged","target","value","Burner","BurnerWrapper","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","preloadedState","rootReducer","combineReducers","action","loaded","tx","loggerMiddleware","createLogger","middleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","ReactDOM","render","store","createStore","applyMiddleware","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb030ad4.chunk.js","sourcesContent":["  \r\nimport { createSelector } from 'reselect'\r\nimport { get } from 'lodash'\r\n\r\n\r\nconst web3 = state => get(state, 'web3.loaded', false)\r\nexport const web3Selector = createSelector(web3, w3 => w3)\r\n\r\nconst account = state => get(state, 'web3.address', [])\r\nexport const accountSelector = createSelector(account, a => a)\r\n\r\n\r\nconst amount = state => get(state, 'tx.amount', [])\r\nexport const amountSelector = createSelector(amount, a => a)","export function loadWeb3(web3) {\r\n    return{\r\n        type: 'LOAD_WEB3',\r\n        web3\r\n    }\r\n}\r\n\r\nexport function loadAccount(address) {\r\n    return{\r\n        type: 'LOAD_ACCOUNT',\r\n        address\r\n    }\r\n}\r\n\r\n\r\nexport function amountChanged(amount) {\r\n    return{\r\n        type: 'AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}","\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Web3 from \"web3\";\r\nimport { SafeAppWeb3Modal } from '@gnosis.pm/safe-apps-web3modal';\r\nimport {\r\n    loadWeb3,\r\n    loadAccount\r\n} from './actions'\r\n\r\nimport shib_token_abi from '../abis/shib.abi.json'\r\n\r\nconst shib_address = '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE'\r\nlet PROVIDER\r\nlet SHIB_TOKEN\r\nlet ACCOUNT\r\nexport const loadEthereum = async (dispatch) => {\r\n\r\n\r\n    const providerOptions = {\r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n\r\n          infuraId: \"85bebd9e43b24aeeab1c6f92afbdecad\",\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    const web3Modal = new SafeAppWeb3Modal({\r\n        network: \"rinkeby\",\r\n        cacheProvider: false,\r\n        providerOptions\r\n      });\r\n     web3Modal.clearCachedProvider();\r\n\r\n      PROVIDER = await web3Modal.connect();\r\n      const web3 = new Web3(PROVIDER);\r\n    \r\n      let network = await web3.eth.net.getId()\r\n      let networkType = await web3.eth.net.getNetworkType()\r\n     \r\n      if (network !== 1) {\r\n        // display testnet warning\r\n        //dispatch(loadWarning('You are currently connected to the ' + networkType + ' Testnet'))\r\n        \r\n      }\r\n\r\n    SHIB_TOKEN = new web3.eth.Contract(shib_token_abi,shib_address)\r\n    \r\n    const accounts = await web3.eth.getAccounts()\r\n\r\n    ACCOUNT = accounts[0]\r\n      \r\n     \r\n    dispatch(loadWeb3(web3))\r\n    dispatch(loadAccount(ACCOUNT))\r\n         \r\n}\r\n\r\n\r\nexport const transaction = async (dispatch, web3, amount) => {\r\n\r\nconst formatedAmount = Web3.utils.toWei(amount.toString())\r\n\r\nlet result = await SHIB_TOKEN.methods.burn(amount).send({from : ACCOUNT, gasLimit:500000})\r\n\r\nconsole.log(result)\r\n\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {web3Selector} from '../store/selectors'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { loadEthereum} from '../store/interactions'\r\nimport {accountSelector} from '../store/selectors'\r\n\r\n\r\n\r\n\r\n\r\nconst Account = (props) => {\r\n  \r\n  return (\r\n<AddressWrapper>\r\n{props.account}\r\n\r\n</AddressWrapper>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\nconst Navigator = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const web3 = useSelector(web3Selector)\r\n    const account = useSelector(accountSelector)\r\n    const props = {dispatch, account }\r\n    return (\r\n\r\n        <NavWrapper>\r\n            <AccountWrapper>\r\n             { web3 ? Account(props) : <Button onClick={ (e) => {  loadEthereum(dispatch) }} variant=\"outline-warning\">Connect</Button>}  \r\n               \r\n            </AccountWrapper>\r\n        </NavWrapper>\r\n\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Navigator\r\n\r\n\r\n\r\nconst NavWrapper = styled.div`\r\n  position: relative;\r\n  height: 90px;\r\n  background: #000000;\r\n  text-align: center;\r\n`;\r\n\r\nconst AccountWrapper = styled.div`\r\n  float:right;\r\n  height: 90px;\r\n  padding: 10px;\r\n  background: #000000;\r\n  text-align: center;\r\n  width: 400px;\r\n  color: #ffffff;\r\n`;\r\n\r\n\r\n\r\nconst AddressWrapper = styled.div`\r\n  position: relative;\r\n  color: #e8ae22;\r\n  \r\n`;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {web3Selector} from '../store/selectors'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {amountChanged} from '../store/actions'\nimport {transaction} from '../store/interactions'\nimport {amountSelector} from '../store/selectors'\n\n\n\n\nconst BurnForm = (dispatch,web3,amount) => {\n    return (\n        <BurnerFormWrapper>\n           <BurnerFormRow>\n            <input \n             type=\"number\"\n             step=\"1\"\n             onChange={ (e) => dispatch(amountChanged(e.target.value))  }\n            />\n            </BurnerFormRow>\n            \n            <BurnerFormRow>\n            <Button onClick={ (e) => { transaction(dispatch,web3,amount)  }} variant=\"outline-warning\">BURN</Button>\n            </BurnerFormRow>\n        </BurnerFormWrapper>\n    )\n}\n\n\n\nconst Burner = () => {\n\n    const dispatch = useDispatch();\n    const web3 = useSelector(web3Selector)\n    const amount = useSelector(amountSelector)\n\n    return (\n\n        <BurnerWrapper>\n         { web3 ? BurnForm(dispatch, web3.web3,amount) : null  }\n      \n         </BurnerWrapper>\n    )\n\n\n\n\n\n}\n\nexport default Burner\n\n\n\nconst BurnerWrapper = styled.div`\n  position:absolute;\n  top: 90px;\n  bottom:0px;\n  text-align:center;\n  width:100%;\n  background: #000000;\n  align-items: center;\n  justify-content: center;\n  color:#ffffff;\n`;\n\nconst BurnerFormWrapper = styled.div`\n  display:flex;\n  top: 90px;\n  margin:auto;\n  height: 500px;\n  width:400px;\n  background: #000000;\n  align-items: top;\n  justify-content: center;\n  border:1px solid #e8ae22;\n  color:#ffffff;\n  border-radius: 10px;\n  padding:10px;\n`;\n\n\nconst BurnerFormRow = styled.div`\n  \n  position:relative;\n  margin:auto;\n  height: 50px;\n  width:400px;\n\n\n`;\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Navigator from './components/Navigator';\nimport Burner from './components/Burner';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigator/>\n      <Burner/>\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\n\r\n\r\nfunction web3(state = {}, action) {\r\n    switch(action.type){\r\n        case 'LOAD_WEB3':\r\n        return { ...state, loaded: true, web3: action.web3}\r\n        case 'LOAD_ACCOUNT':\r\n        return { ...state, address: action.address}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nfunction tx(state = {}, action) {\r\n    switch(action.type){\r\n        case 'AMOUNT_CHANGED':\r\n        return { ...state, amount: action.amount}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    web3,\r\n    tx\r\n  })\r\n  \r\n  \r\n  export default rootReducer","import { createStore, applyMiddleware, compose} from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger()\r\nconst middleware = []\r\n\r\n// for redux dev tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default function configureStore(preloadedState){\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\r\n\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\nReactDOM.render(\n  <Provider store = {configureStore()}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}